import Head from "next/head";
import React, { useState, useEffect } from "react";
import styles from "../styles/Home.module.css";
import { useAnchorWallet } from "@solana/wallet-adapter-react";
import { Connection, PublicKey, clusterApiUrl } from "@solana/web3.js";
import {
  Program,
  AnchorProvider as Provider,
} from "@project-serum/anchor";
import idl from "../contracts/idl.json";
import * as web3 from "@solana/web3.js";
import { WalletMultiButton } from "@solana/wallet-adapter-react-ui";

const programID = new PublicKey(idl.metadata.address);
const network = clusterApiUrl("devnet");
const opts = {
  preflightCommitment: "processed",
};

export default function Home() {
  const [name, setName] = useState("");
  const [displayName, setDisplayName] = useState("");
  const wallet = useAnchorWallet();

  const getProgram = () => {
    const connection = new Connection(network);
    const provider = new Provider(connection, wallet, opts.preflightCommitment);
    const program = new Program(idl, programID, provider);

    return program;
  };

  const updateName = async () => {
    try {
      const program = getProgram();
      setName('');

      const [pda] = await web3.PublicKey.findProgramAddress(
        [wallet.publicKey.toBuffer()],
        programID
      );

      await program.methods
        .updateUser(name)
        .accounts({
          user: wallet.publicKey,
          userAccount: pda,
        })
        .signers([])
        .rpc();

      const pdaUser = await program.account.user.fetch(pda);
      setDisplayName(pdaUser.name);
    } catch (error) {
      console.error(error);
    }
  };

  const showName = async () => {
    try {
      const program = getProgram();
      const [pda] = await web3.PublicKey.findProgramAddress(
        [wallet.publicKey.toBuffer()],
        programID
      );
      const pdaUser = await program.account.user.fetch(pda);
      setDisplayName(pdaUser.name);
    } catch (error) {
      console.error(error);
    }
  };

  const handleChange = (event) => {
    setName(event.target.value);
  };

  useEffect(() => {
    showName();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Solana NFT Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <nav className="flex items-center justify-between flex-wrap p-6 border-b border-slate-400">
          <div className="flex items-center flex-shrink-0 text-white mr-6">
            <span className="font-semibold text-xl tracking-tight">
              Solana NFT Marketplace
            </span>
          </div>
          <div className="block lg:hidden">
            <button className="flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white">
              <svg
                className="fill-current h-3 w-3"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <title>Menu</title>
                <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z" />
              </svg>
            </button>
          </div>
          <div className="w-full block flex-grow lg:flex lg:items-center lg:w-auto">
            <div className="text-sm lg:flex-grow">
              <a
                href="#responsive-header"
                className="block mt-4 lg:inline-block lg:mt-0 hover:text-white mr-4"
              >
                Home
              </a>
            </div>
            <div>
              <WalletMultiButton />
            </div>
          </div>
        </nav>
      </header>

      <main className={styles.main}>
        <div>{displayName}</div>
        <div>
          Name:{" "}
          <input type="text" name="name" onChange={handleChange} value={name} />
          <button
            className="rounded-full px-4 py-2 bg-green-600"
            onClick={updateName}
          >
            Submit
          </button>
        </div>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
